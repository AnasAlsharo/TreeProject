["% INITIATING INPUTS! \ninputs.nmin1 = 3; \ninputs.nmin2 = 1; \ninputs.OnlyTree = 1; \ninputs.Tria = 0; \ninputs.Dist = 1; \ninputs.MinCylRad = 0.0025;\ninputs.ParentCor = 1; \ninputs.TaperCor = 1; \ninputs.GrowthVolCor = 0; \ninputs.GrowthVolFac = 1.5; \ninputs.filter.k = 10;\ninputs.filter.radius = 0.00;\ninputs.filter.nsigma = 1.5;\ninputs.filter.PatchDiam1 = 0.05;\ninputs.filter.BallRad1 = 0.075;\ninputs.filter.ncomp = 2;\ninputs.filter.EdgeLength = 0.004;\ninputs.filter.plot = 1;\ninputs.name = 'tree'; \ninputs.tree = 1;\ninputs.model = 1;\ninputs.savemat = 1;\ninputs.savetxt = 1; \ninputs.plot = 0;\ninputs.disp = 0; \n\n\n\n% User Defined \n% -------------\n\ntrain_set = 34; % ~ 70%\ntest_set  = 15; % ~ 30%\nno_of_iterations = 10;   % Number TRIALS OR ITERATIONS!\nno_of_model_runs = 5;   % Each RUN for each tree will be repeated 5 times and the average DBH will be taken, The reason is that TreemQSM gives different results even for the same inputs.\n\nDBH_filepath = 'OriID_vs_TreeQSMID.xlsx'; % YOU NEED TO CHANGE THIS! Directory where DBH observed Data (Excel sheet) is located.\n\ntrain_range = ['E' num2str(2) ':E' num2str(train_set+1)]; % I am specifying the cells where the DBH data is stored ((from D2 to D21))\ntest_range  = ['E' num2str(train_set+2) ':E' num2str(train_set+test_set+1)]; % Extract the cells containing test data.", "lasDirectory = ''; % This means that the .las files are in the main src directory.\nlasFiles = dir(fullfile(lasDirectory, '*.las'));\nfile_nums = cellfun(@(x) str2double(x(1:end-4)), {lasFiles.name});\n[~, sorted_indices] = sort(file_nums);\nlasFiles = lasFiles(sorted_indices);\nvariable_names = cell(1, train_set); % This is just to assign variable names to each point cloud before saving. \n\nfor tree = 1:train_set\n    name = lasFiles(tree).name;\n    lasReader = lasFileReader(name);\n    ptCloud = readPointCloud(lasReader);\n    P = ptCloud.Location - mean(ptCloud.Location);\n    var_name = ['P_' num2str(tree)];\n    eval([var_name ' = P;']);\n    variable_names{tree} = var_name;\nend\n\nsave('trees_train', variable_names{:});\n\ndisp(\"-----------------------\")\ndisp(\"Saving Trees Completed!\")\ndisp(\"-----------------------\")", "rmse_old=1e6; % Initiating a large value for RMSE just for the sake of comparison and storing the smallest RMSE. \nrmse_for_iteration= zeros(no_of_iterations, 1); % Creating an empty array to store RMSE for each trial (for monitoring purposes).\n\nDBH_obs = xlsread(DBH_filepath, train_range); % Here We're importing the array of the observed DBH.From Sheet 2. \n\nfinal_params=zeros(4,1); % Because we are dealing with 3 parameters that we need to store and monitor and the fourth is the RMSE score \nfor iteration = 1:no_of_iterations % START THE TRIALS LOOP.\n\n    inputs.PatchDiam1    = 0.05 + (0.10 - 0.05) * rand;  % The 0.05 is the lower limit and the 0.10 is the upper limit. [0.05 - 0.10]\n    inputs.PatchDiam2Min = 0.02 + (0.06 - 0.02) * rand;  % The 0.02 is the lower limit and the 0.06 is the upper limit. [0.02 - 0.06]\n    inputs.PatchDiam2Max = 0.03 + (0.15 - 0.03) * rand;  % The 0.03 is the lower limit and the 0.15 is the upper limit. [0.03 - 0.15]\n    inputs.BallRad1 = inputs.PatchDiam1 + 0.015;\n    inputs.BallRad2 = inputs.PatchDiam2Max + 0.01;\n\n\n    QSMs = make_models_parallel( 'trees_train' , 'QSMs trees' , no_of_model_runs , inputs );\n\n\n    % Since the output data structure is complicated, I have to use nested loop to get the output DBH, the below nested loop is just averaging the DBH.\n    DBH_qsm=zeros(train_set,1);\n    \n\n    kk=1;\n    for i = 1 : no_of_model_runs : no_of_model_runs*train_set\n        DBH_array=[];\n\n        c=1;\n            \n            for j = i:i+no_of_model_runs-1\n                DBH = double(QSMs(j).treedata.DBHqsm);\n                DBH_array(c)= DBH;\n            end\n            \n            avg_DBH=mean(DBH_array);\n\n        DBH_qsm(kk)=avg_DBH;\n        kk = kk+1;\n    end\n\n    rmse_score = sqrt(mean((DBH_obs - DBH_qsm).^2));\n    disp(rmse_score)\n    rmse_for_iteration(iteration)=rmse_score; % HERE I am storing the RMSE for each trial over the 49 trees (training set).\n    if rmse_score < rmse_old && inputs.PatchDiam1 > 0 && inputs.PatchDiam2Min>0\n        \n        % Store values in a 4x1 vector\n        final_params = [inputs.PatchDiam1; inputs.PatchDiam2Min; inputs.PatchDiam2Max; rmse_score]; % FINAL RESULTS CONVENTION.\n        disp(final_params)\n        rmse_old = rmse_score;\n\n    end % End for the if statement.\n    disp(['--------Iteration (' num2str(iteration) ') Completed']);\nend", "% INITIATING INPUTS! \ninputs.nmin1 = 3; \ninputs.nmin2 = 1; \ninputs.OnlyTree = 1; \ninputs.Tria = 0; \ninputs.Dist = 1; \ninputs.MinCylRad = 0.0025;\ninputs.ParentCor = 1; \ninputs.TaperCor = 1; \ninputs.GrowthVolCor = 0; \ninputs.GrowthVolFac = 1.5; \ninputs.filter.k = 10;\ninputs.filter.radius = 0.00;\ninputs.filter.nsigma = 1.5;\ninputs.filter.PatchDiam1 = 0.05;\ninputs.filter.BallRad1 = 0.075;\ninputs.filter.ncomp = 2;\ninputs.filter.EdgeLength = 0.004;\ninputs.filter.plot = 1;\ninputs.name = 'tree'; \ninputs.tree = 1;\ninputs.model = 1;\ninputs.savemat = 1;\ninputs.savetxt = 1; \ninputs.plot = 0;\ninputs.disp = 0; \n\n\n\n% User Defined \n% -------------\n\ntrain_set = 34; % ~ 70%\ntest_set  = 15; % ~ 30%\nno_of_iterations = 10;   % Number TRIALS OR ITERATIONS!\nno_of_model_runs = 2;   % Each RUN for each tree will be repeated 5 times and the average DBH will be taken, The reason is that TreemQSM gives different results even for the same inputs.\n\nDBH_filepath = 'OriID_vs_TreeQSMID.xlsx'; % YOU NEED TO CHANGE THIS! Directory where DBH observed Data (Excel sheet) is located.\n\ntrain_range = ['E' num2str(2) ':E' num2str(train_set+1)]; % I am specifying the cells where the DBH data is stored ((from D2 to D21))\ntest_range  = ['E' num2str(train_set+2) ':E' num2str(train_set+test_set+1)]; % Extract the cells containing test data.", "lasDirectory = ''; % This means that the .las files are in the main src directory.\nlasFiles = dir(fullfile(lasDirectory, '*.las'));\nfile_nums = cellfun(@(x) str2double(x(1:end-4)), {lasFiles.name});\n[~, sorted_indices] = sort(file_nums);\nlasFiles = lasFiles(sorted_indices);\nvariable_names = cell(1, train_set); % This is just to assign variable names to each point cloud before saving. \n\nfor tree = 1:train_set\n    name = lasFiles(tree).name;\n    lasReader = lasFileReader(name);\n    ptCloud = readPointCloud(lasReader);\n    P = ptCloud.Location - mean(ptCloud.Location);\n    var_name = ['P_' num2str(tree)];\n    eval([var_name ' = P;']);\n    variable_names{tree} = var_name;\nend\n\nsave('trees_train', variable_names{:});\n\ndisp(\"-----------------------\")\ndisp(\"Saving Trees Completed!\")\ndisp(\"-----------------------\")", "rmse_old=1e6; % Initiating a large value for RMSE just for the sake of comparison and storing the smallest RMSE. \nrmse_for_iteration= zeros(no_of_iterations, 1); % Creating an empty array to store RMSE for each trial (for monitoring purposes).\n\nDBH_obs = xlsread(DBH_filepath, train_range); % Here We're importing the array of the observed DBH.From Sheet 2. \n\nfinal_params=zeros(4,1); % Because we are dealing with 3 parameters that we need to store and monitor and the fourth is the RMSE score \nfor iteration = 1:no_of_iterations % START THE TRIALS LOOP.\n\n    inputs.PatchDiam1    = 0.05 + (0.10 - 0.05) * rand;  % The 0.05 is the lower limit and the 0.10 is the upper limit. [0.05 - 0.10]\n    inputs.PatchDiam2Min = 0.02 + (0.06 - 0.02) * rand;  % The 0.02 is the lower limit and the 0.06 is the upper limit. [0.02 - 0.06]\n    inputs.PatchDiam2Max = 0.03 + (0.15 - 0.03) * rand;  % The 0.03 is the lower limit and the 0.15 is the upper limit. [0.03 - 0.15]\n    inputs.BallRad1 = inputs.PatchDiam1 + 0.015;\n    inputs.BallRad2 = inputs.PatchDiam2Max + 0.01;\n\n\n    QSMs = make_models_parallel( 'trees_train' , 'QSMs trees' , no_of_model_runs , inputs );\n\n\n    % Since the output data structure is complicated, I have to use nested loop to get the output DBH, the below nested loop is just averaging the DBH.\n    DBH_qsm=zeros(train_set,1);\n    \n\n    kk=1;\n    for i = 1 : no_of_model_runs : no_of_model_runs*train_set\n        DBH_array=[];\n\n        c=1;\n            \n            for j = i:i+no_of_model_runs-1\n                DBH = double(QSMs(j).treedata.DBHqsm);\n                DBH_array(c)= DBH;\n            end\n            \n            avg_DBH=mean(DBH_array);\n\n        DBH_qsm(kk)=avg_DBH;\n        kk = kk+1;\n    end\n\n    rmse_score = sqrt(mean((DBH_obs - DBH_qsm).^2));\n    disp(rmse_score)\n    rmse_for_iteration(iteration)=rmse_score; % HERE I am storing the RMSE for each trial over the 49 trees (training set).\n    if rmse_score < rmse_old && inputs.PatchDiam1 > 0 && inputs.PatchDiam2Min>0\n        \n        % Store values in a 4x1 vector\n        final_params = [inputs.PatchDiam1; inputs.PatchDiam2Min; inputs.PatchDiam2Max; rmse_score]; % FINAL RESULTS CONVENTION.\n        disp(final_params)\n        rmse_old = rmse_score;\n\n    end % End for the if statement.\n    disp(['--------Iteration (' num2str(iteration) ') Completed']);\nend", "variable_names_t = cell(1, test_set); % This is just to assign variable names to each point cloud before saving. \n\ncc=1;\nfor tree = train_set+1:train_set+test_set\n    name_t = lasFiles(tree).name;\n    lasReader_t = lasFileReader(name_t);\n    ptCloud_t = readPointCloud(lasReader_t);\n    P_t = ptCloud_t.Location - mean(ptCloud_t.Location);\n    var_name_t = ['Pt_' num2str(tree)];\n    eval([var_name_t ' = P_t;']);\n    variable_names_t{cc} = var_name_t;\n    cc = cc+1;\nend\n\nsave('trees_test', variable_names_t{:});\n\ninputs.PatchDiam1    = final_params(1); % NOW \ninputs.PatchDiam2Min = final_params(2); % THEY\ninputs.PatchDiam2Max = final_params(3); % ARE FIXED! \ninputs.BallRad1 = inputs.PatchDiam1+0.015;\ninputs.BallRad2 = inputs.PatchDiam2Max+0.01;\n\ndisp([\"Test DBH From Cells:\" test_range])\nDBH_obs_test = xlsread(DBH_filepath, test_range); % Here We're importing the array of the observed DBH But now for testing.\n\nQSMs_test = make_models_parallel('trees_test' , 'QSMs trees test' , no_of_model_runs , inputs);\n\nk=1;\nDBH_qsm_test=[];\nfor i = 1 : no_of_model_runs : no_of_model_runs*test_set\nDBH_array=[];\n    c=1;\n    for j = i:i+no_of_model_runs-1\n        DBH = double(QSMs(j).treedata.DBHqsm);\n        DBH_array(c)= DBH;\n    c=c+1;\n    end\n    avg_DBH=mean(DBH_array);\n\nDBH_qsm_test(k)=avg_DBH;\nk = k+1;\nend\n\nfinal_test_result(:,1)= 100*DBH_qsm_test;\nfinal_test_result(:,2)= DBH_obs_test;\ndisp(\"Final Testing Results:\")\ndisp(\"   -----------------\")\ndisp(\"   DBH_qsm   DBH_obs\")\ndisp(\"   -------   -------\")\ndisp(final_test_result)", "% INITIATING INPUTS! \ninputs.nmin1 = 3; \ninputs.nmin2 = 1; \ninputs.OnlyTree = 1; \ninputs.Tria = 0; \ninputs.Dist = 1; \ninputs.MinCylRad = 0.0025;\ninputs.ParentCor = 1; \ninputs.TaperCor = 1; \ninputs.GrowthVolCor = 0; \ninputs.GrowthVolFac = 1.5; \ninputs.filter.k = 10;\ninputs.filter.radius = 0.00;\ninputs.filter.nsigma = 1.5;\ninputs.filter.PatchDiam1 = 0.05;\ninputs.filter.BallRad1 = 0.075;\ninputs.filter.ncomp = 2;\ninputs.filter.EdgeLength = 0.004;\ninputs.filter.plot = 1;\ninputs.name = 'tree'; \ninputs.tree = 1;\ninputs.model = 1;\ninputs.savemat = 1;\ninputs.savetxt = 1; \ninputs.plot = 0;\ninputs.disp = 0; \n\n\n\n% User Defined \n% -------------\n\ntrain_set = 34; % ~ 70%\ntest_set  = 15; % ~ 30%\nno_of_iterations = 2;   % Number TRIALS OR ITERATIONS!\nno_of_model_runs = 5;   % Each RUN for each tree will be repeated 5 times and the average DBH will be taken, The reason is that TreemQSM gives different results even for the same inputs.\n\nDBH_filepath = 'OriID_vs_TreeQSMID.xlsx'; % YOU NEED TO CHANGE THIS! Directory where DBH observed Data (Excel sheet) is located.\n\ntrain_range = ['E' num2str(2) ':E' num2str(train_set+1)]; % I am specifying the cells where the DBH data is stored ((from D2 to D21))\ntest_range  = ['E' num2str(train_set+2) ':E' num2str(train_set+test_set+1)]; % Extract the cells containing test data.", "lasDirectory = ''; % This means that the .las files are in the main src directory.\nlasFiles = dir(fullfile(lasDirectory, '*.las'));\nfile_nums = cellfun(@(x) str2double(x(1:end-4)), {lasFiles.name});\n[~, sorted_indices] = sort(file_nums);\nlasFiles = lasFiles(sorted_indices);\nvariable_names = cell(1, train_set); % This is just to assign variable names to each point cloud before saving. \n\nfor tree = 1:train_set\n    name = lasFiles(tree).name;\n    lasReader = lasFileReader(name);\n    ptCloud = readPointCloud(lasReader);\n    P = ptCloud.Location - mean(ptCloud.Location);\n    var_name = ['P_' num2str(tree)];\n    eval([var_name ' = P;']);\n    variable_names{tree} = var_name;\nend\n\nsave('trees_train', variable_names{:});\n\ndisp(\"-----------------------\")\ndisp(\"Saving Trees Completed!\")\ndisp(\"-----------------------\")", "rmse_old=1e6; % Initiating a large value for RMSE just for the sake of comparison and storing the smallest RMSE. \nrmse_for_iteration= zeros(no_of_iterations, 1); % Creating an empty array to store RMSE for each trial (for monitoring purposes).\n\nDBH_obs = xlsread(DBH_filepath, train_range); % Here We're importing the array of the observed DBH.From Sheet 2. \n\nfinal_params=zeros(4,1); % Because we are dealing with 3 parameters that we need to store and monitor and the fourth is the RMSE score \nfor iteration = 1:no_of_iterations % START THE TRIALS LOOP.\n\n    inputs.PatchDiam1    = 0.05 + (0.10 - 0.05) * rand;  % The 0.05 is the lower limit and the 0.10 is the upper limit. [0.05 - 0.10]\n    inputs.PatchDiam2Min = 0.02 + (0.06 - 0.02) * rand;  % The 0.02 is the lower limit and the 0.06 is the upper limit. [0.02 - 0.06]\n    inputs.PatchDiam2Max = 0.03 + (0.15 - 0.03) * rand;  % The 0.03 is the lower limit and the 0.15 is the upper limit. [0.03 - 0.15]\n    inputs.BallRad1 = inputs.PatchDiam1 + 0.015;\n    inputs.BallRad2 = inputs.PatchDiam2Max + 0.01;\n\n\n    QSMs = make_models_parallel( 'trees_train' , 'QSMs trees' , no_of_model_runs , inputs );\n\n\n    % Since the output data structure is complicated, I have to use nested loop to get the output DBH, the below nested loop is just averaging the DBH.\n    DBH_qsm=zeros(train_set,1);\n    \n\n    kk=1;\n    for i = 1 : no_of_model_runs : no_of_model_runs*train_set\n        DBH_array=[];\n\n        c=1;\n            \n            for j = i:i+no_of_model_runs-1\n                DBH = double(QSMs(j).treedata.DBHqsm);\n                DBH_array(c)= DBH;\n            end\n            \n            avg_DBH=mean(DBH_array);\n\n        DBH_qsm(kk)=avg_DBH;\n        kk = kk+1;\n    end\n\n    rmse_score = sqrt(mean((DBH_obs - DBH_qsm).^2));\n    disp(rmse_score)\n    rmse_for_iteration(iteration)=rmse_score; % HERE I am storing the RMSE for each trial over the 49 trees (training set).\n    if rmse_score < rmse_old && inputs.PatchDiam1 > 0 && inputs.PatchDiam2Min>0\n        \n        % Store values in a 4x1 vector\n        final_params = [inputs.PatchDiam1; inputs.PatchDiam2Min; inputs.PatchDiam2Max; rmse_score]; % FINAL RESULTS CONVENTION.\n        disp(final_params)\n        rmse_old = rmse_score;\n\n    end % End for the if statement.\n    disp(['--------Iteration (' num2str(iteration) ') Completed']);\nend"]